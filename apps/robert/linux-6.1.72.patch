diff -urN -x tools -x security /tmp/linux-6.1.72/drivers/misc/lkp-enc.c /users/rherna70/code/linux-6.1.72/drivers/misc/lkp-enc.c
--- /tmp/linux-6.1.72/drivers/misc/lkp-enc.c	1969-12-31 17:00:00.000000000 -0700
+++ /users/rherna70/code/linux-6.1.72/drivers/misc/lkp-enc.c	2024-03-25 21:29:00.567356000 -0600
@@ -0,0 +1,148 @@
+#include <linux/ioctl.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/uaccess.h>
+#include <linux/io.h>
+#include <linux/spinlock.h>
+
+#define LKP_ENC_IOCTL_RKEY _IOR('q', 1, unsigned int)
+#define LKP_ENC_IOCTL_WKEY _IOW('q', 2, unsigned int)
+
+#define LKP_ENC_IOCTL_RCH _IOR('q', 3, unsigned int)
+#define LKP_ENC_IOCTL_WCH _IOW('q', 4, unsigned int)
+
+#define DEVICE_BASE_PHYS_ADDR 0xfebf2000
+
+#define MAX_LKP_ENC_BUFFER_SIZE 128
+
+static spinlock_t my_lock;
+
+void *lkp_enc_devmem = 0x0;
+unsigned long lkp_enc_data = 0;
+char str_data [MAX_LKP_ENC_BUFFER_SIZE];
+
+static long lkp_enc_ioctl(struct file *file, unsigned int cmd, unsigned long arg) {
+    int i = 0;
+    unsigned long num_bytes = 0;
+    unsigned long flags;
+
+    while(spin_is_locked(&my_lock)) {
+        // wait
+    }
+    spin_lock_irqsave(&my_lock, flags);
+    switch (cmd) {
+        
+        case LKP_ENC_IOCTL_RKEY :
+            pr_info("IN LKP_ENC_IOCTL_RKEY, reading data from device\n");
+            lkp_enc_data = (unsigned long) ioread32(lkp_enc_devmem);
+            pr_info("copying data to userspace");
+            num_bytes = copy_to_user((unsigned long *)arg, &lkp_enc_data, sizeof(unsigned long));
+            if(num_bytes != 0) {
+                pr_info("Failed to copy data to user space\n");
+                spin_unlock_irqrestore(&my_lock, flags);
+                return -EFAULT;
+            }
+            break;
+
+        case LKP_ENC_IOCTL_WKEY :
+            pr_info("IN LKP_ENC_IOCTL_RKEY, writing data to device\n");
+            pr_info("copying data from userspace");
+            num_bytes = copy_from_user(&lkp_enc_data, (unsigned long *)arg, sizeof(unsigned long));
+            if(num_bytes != 0) {
+                pr_info("Failed to copy data from user space\n");
+                spin_unlock_irqrestore(&my_lock, flags);
+                return -EFAULT;
+            }
+            pr_info("writing data to device");
+            iowrite32(lkp_enc_data, lkp_enc_devmem);
+            break;
+
+        case LKP_ENC_IOCTL_RCH :
+            pr_info("IN LKP_ENC_IOCTL_RCH, reading data from device\n");
+            // We start from 1 as the first byte is the encryption key
+            i = 1;
+            while ((char) lkp_enc_data != '\0') {
+                lkp_enc_data = ioread32(lkp_enc_devmem+i);
+                pr_info("data returned from ioread32 as char: %c\n", (char) lkp_enc_data);
+                str_data[i-1] = (char) lkp_enc_data;
+                i++;
+            }
+
+            pr_info("copying data to userspace");
+            num_bytes = copy_to_user((char *)arg, str_data, sizeof(str_data));
+            if (num_bytes != 0) {
+                pr_info("Failed to copy data to user space\n");
+                spin_unlock_irqrestore(&my_lock, flags);
+                return -EFAULT;
+            }
+            break;
+
+        case LKP_ENC_IOCTL_WCH :
+            pr_info("IN LKP_ENC_IOCTL_WCH, writing data to device\n");
+            pr_info("copying data from userspace");
+            num_bytes = copy_from_user(str_data, (char *)arg, sizeof(str_data));
+            if(num_bytes != 0) {
+                pr_info("Failed to copy data from user space\n");
+                spin_unlock_irqrestore(&my_lock, flags);
+                return -EFAULT;
+            }
+            i = 0;
+            while(str_data[i] != '\0') {
+                // We start from 1 as the first byte is the encryption key
+                iowrite32((int) str_data[i], (lkp_enc_devmem + i + 1));
+                i++;
+            }
+            break;
+
+        default:
+            spin_unlock_irqrestore(&my_lock, flags);
+            return -ENOTTY; // unknown command
+    }
+
+    spin_unlock_irqrestore(&my_lock, flags);
+    return 0;
+}
+
+static struct file_operations lkp_enc_fops = {
+    .unlocked_ioctl = lkp_enc_ioctl,
+};
+
+static int __init lkp_enc_driver_init(void) {
+    // Initialize spinlock
+    spin_lock_init(&my_lock);
+
+    lkp_enc_devmem = ioremap(DEVICE_BASE_PHYS_ADDR, 4096);
+
+    if(!lkp_enc_devmem) {
+        pr_err("Failed to map device registers in memory\n");
+        return -1;
+    }
+
+    if (register_chrdev(250, "lkp_enc_driver", &lkp_enc_fops) < 0) {
+        pr_err("Failed to register lkp_enc_driver\n");
+        return -1;
+    }
+
+    pr_info("lkp_enc_driver loaded, registered ioctls 0x%lx (get enc key "
+        ") and 0x%lx (write enc key) \n", LKP_ENC_IOCTL_RKEY,
+        LKP_ENC_IOCTL_WKEY);
+
+    pr_info("lkp_enc_driver loaded, registered ioctls 0x%lx (get chars "
+        ") and 0x%lx (write chars) \n", LKP_ENC_IOCTL_RCH,
+        LKP_ENC_IOCTL_WCH);
+    return 0;
+}
+
+static void __exit lkp_enc_driver_exit(void) {
+    unregister_chrdev(250, "lkp_enc_driver");
+
+    if(lkp_enc_devmem)
+        iounmap(lkp_enc_devmem);
+
+    pr_info("lkp_enc_driver unloaded\n");
+}
+
+module_init(lkp_enc_driver_init);
+module_exit(lkp_enc_driver_exit);
diff -urN -x tools -x security /tmp/linux-6.1.72/drivers/misc/Makefile /users/rherna70/code/linux-6.1.72/drivers/misc/Makefile
--- /tmp/linux-6.1.72/drivers/misc/Makefile	2024-01-10 09:10:37.000000000 -0700
+++ /users/rherna70/code/linux-6.1.72/drivers/misc/Makefile	2024-03-24 15:30:00.362411000 -0600
@@ -3,6 +3,8 @@
 # Makefile for misc devices that really don't fit anywhere else.
 #
 
+obj-y += lkp-enc.o
+
 obj-$(CONFIG_IBM_ASM)		+= ibmasm/
 obj-$(CONFIG_IBMVMC)		+= ibmvmc.o
 obj-$(CONFIG_AD525X_DPOT)	+= ad525x_dpot.o
diff -urN -x tools -x security /tmp/linux-6.1.72/init/main.c /users/rherna70/code/linux-6.1.72/init/main.c
--- /tmp/linux-6.1.72/init/main.c	2024-01-10 09:10:37.000000000 -0700
+++ /users/rherna70/code/linux-6.1.72/init/main.c	2024-03-25 22:24:51.486166000 -0600
@@ -1502,7 +1502,11 @@
 
 static int __ref kernel_init(void *unused)
 {
+	int i;
 	int ret;
+	void *devmem;
+	unsigned int data;
+	char *strdata_lkpenc;
 
 	/*
 	 * Wait until kthreadd is all set-up.
