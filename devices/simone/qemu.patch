diff -urN qemu-8.2.1/hw/misc/Kconfig devices/Simone/qemu-8.2.1/hw/misc/Kconfig
--- qemu-8.2.1/hw/misc/Kconfig	2024-01-29 13:13:22.000000000 -0600
+++ devices/Simone/qemu-8.2.1/hw/misc/Kconfig	2024-03-31 20:37:17.428740175 -0500
@@ -1,3 +1,7 @@
+config LKP_ENC
+    bool
+    default y
+
 config APPLESMC
     bool
     depends on ISA_BUS
diff -urN qemu-8.2.1/hw/misc/lkp_enc.c devices/Simone/qemu-8.2.1/hw/misc/lkp_enc.c
--- qemu-8.2.1/hw/misc/lkp_enc.c	1969-12-31 18:00:00.000000000 -0600
+++ devices/Simone/qemu-8.2.1/hw/misc/lkp_enc.c	2024-03-31 20:37:51.276552329 -0500
@@ -0,0 +1,119 @@
+#include "qemu/osdep.h"
+#include "hw/pci/msi.h"
+#include "hw/pci/pci.h"
+#define TYPE_LKP_ENC "lkp_enc"
+#define LKP_ENC(obj) OBJECT_CHECK(lkp_enc, (obj), TYPE_LKP_ENC)
+
+typedef struct
+{
+    PCIDevice parent_obj;
+    int myInteger; // Default value is 5
+    char string[256];
+    MemoryRegion mmio;
+} lkp_enc;
+
+static char cypher_string(char letter, int enc_key)
+{
+    // Encrypt the word by shifting each letter forward by the encryption key
+    if (letter >= 'a' && letter <= 'z')
+    {
+        return 'a' + (letter - 'a' + enc_key) % 26;
+    }
+    else if (letter >= 'A' && letter <= 'Z')
+    {
+        return 'A' + (letter - 'A' + enc_key) % 26;
+    }
+
+    return letter;
+}
+
+static uint64_t mmio_read(void *opaque, hwaddr addr, unsigned size)
+{
+    lkp_enc *dev = (lkp_enc *)opaque;
+
+    uint64_t ret = 0;
+    int index = 0;
+
+    if (addr == 0x0)
+    {
+        ret = dev->myInteger;
+    }
+    else if (addr >= 0x4)
+    {
+        index = addr - 0x4;
+        if (index >= 0 && index < 256)
+        {
+            ret = dev->string[index];
+        }
+    }
+
+    return ret;
+}
+
+static void mmio_write(void *opaque, hwaddr addr, uint64_t val, unsigned size)
+{
+    /* TODO implement that function later */
+    lkp_enc *dev = (lkp_enc *)opaque;
+
+    int index = 0;
+
+    if (addr == 0x0)
+    {
+        dev->myInteger = val;
+    }
+    else if (addr >= 0x4)
+    {
+        index = addr - 0x4;
+        dev->string[index] = cypher_string(val, dev->myInteger);
+    }
+
+    return;
+}
+
+static const MemoryRegionOps lkp_enc_ops = {
+    .read = mmio_read,
+    .write = mmio_write,
+};
+
+static void lkp_enc_realize(PCIDevice *pdev, Error **errp)
+{
+    lkp_enc *s = LKP_ENC(pdev);
+    memory_region_init_io(&s->mmio, OBJECT(s), &lkp_enc_ops, s,
+                          "lkp_enc", 4096);
+    pci_register_bar(&s->parent_obj, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &s->mmio);
+    s->myInteger = 5;
+}
+
+static void lkp_enc_class_init(ObjectClass *class, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(class);
+    PCIDeviceClass *k = PCI_DEVICE_CLASS(class);
+
+    k->realize = lkp_enc_realize;
+    k->vendor_id = PCI_VENDOR_ID_QEMU;
+    k->device_id = 0xcafe;
+    k->revision = 0x10;
+    k->class_id = PCI_CLASS_OTHERS;
+
+    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
+}
+
+static void lkp_enc_register_types(void)
+{
+    static InterfaceInfo interfaces[] = {
+        {INTERFACE_CONVENTIONAL_PCI_DEVICE},
+        {},
+    };
+
+    static const TypeInfo lkp_enc_info = {
+        .name = TYPE_LKP_ENC,
+        .parent = TYPE_PCI_DEVICE,
+        .instance_size = sizeof(lkp_enc),
+        .class_init = lkp_enc_class_init,
+        .interfaces = interfaces,
+    };
+
+    type_register_static(&lkp_enc_info);
+}
+
+type_init(lkp_enc_register_types)
diff -urN qemu-8.2.1/hw/misc/meson.build devices/Simone/qemu-8.2.1/hw/misc/meson.build
--- qemu-8.2.1/hw/misc/meson.build	2024-01-29 13:13:22.000000000 -0600
+++ devices/Simone/qemu-8.2.1/hw/misc/meson.build	2024-03-31 20:38:14.456423691 -0500
@@ -1,3 +1,4 @@
+system_ss.add(when: 'CONFIG_LKP_ENC', if_true: files('lkp_enc.c'))
 system_ss.add(when: 'CONFIG_APPLESMC', if_true: files('applesmc.c'))
 system_ss.add(when: 'CONFIG_EDU', if_true: files('edu.c'))
 system_ss.add(when: 'CONFIG_FW_CFG_DMA', if_true: files('vmcoreinfo.c'))
